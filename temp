# =============================================================================
# Project Configuration
# =============================================================================

# Compiler and Linker
CXX = g++
CXXFLAGS = -std=c++23 -Wall -Wextra -Wpedantic -O2
TEST_FLAGS = -lgtest -lgtest_main -pthread
DEBUG_FLAGS = -g -DDEBUG

# Directories
COMMON_DIR = common
PROBLEMS_DIR = problems

# Python settings
PYTHON = python3
PYTEST = pytest

# =============================================================================
# Compiler and Linker Flags
# =============================================================================

# Include paths
INCLUDES = -I$(COMMON_DIR)

# =============================================================================
# File Discovery
# =============================================================================

# Find all problem directories
PROBLEM_DIRS = $(shell find $(PROBLEMS_DIR) -maxdepth 1 -type d -not -path $(PROBLEMS_DIR))
PROBLEM_NAMES = $(notdir $(PROBLEM_DIRS))

# Find source files
CPP_SOURCES = $(shell find $(PROBLEMS_DIR) -name "*.cc" -not -name "*_test.cc")
CPP_TESTS = $(shell find $(PROBLEMS_DIR) -name "*_test.cc")
PYTHON_SOURCES = $(shell find $(PROBLEMS_DIR) -name "*.py" -not -name "*_test.py")
PYTHON_TESTS = $(shell find $(PROBLEMS_DIR) -name "*_test.py")

# =============================================================================
# Main Build Rules
# =============================================================================

.PHONY: all
all: build

.PHONY: build
build: build-cpp

.PHONY: build-cpp
build-cpp: $(PROBLEM_NAMES)

# Build individual problems
.PHONY: $(PROBLEM_NAMES)
$(PROBLEM_NAMES):
    @echo "Building $@..."
    @if [ -f $(PROBLEMS_DIR)/$@/$@.cc ]; then \
        $(CXX) $(CXXFLAGS) $(INCLUDES) -o $(PROBLEMS_DIR)/$@/$@ $(PROBLEMS_DIR)/$@/$@.cc; \
    fi

# =============================================================================
# Test Rules
# =============================================================================

.PHONY: test
test: test-cpp test-python

.PHONY: test-cpp
test-cpp:
    @echo "Running C++ tests..."
    @for dir in $(PROBLEM_DIRS); do \
        if [ -f $$dir/*_test.cc ]; then \
            echo "Testing C++ in $$dir..."; \
            problem_name=$$(basename $$dir); \
            $(CXX) $(CXXFLAGS) $(DEBUG_FLAGS) $(INCLUDES) $(TEST_FLAGS) \
                -o $$dir/test_runner $$dir/*_test.cc $$dir/$$problem_name.cc; \
            if [ $$? -eq 0 ]; then \
                $$dir/test_runner; \
                rm -f $$dir/test_runner; \
            else \
                echo "Failed to compile tests for $$dir"; \
            fi \
        fi \
    done

.PHONY: test-python
test-python:
    @echo "Running Python tests..."
    @for dir in $(PROBLEM_DIRS); do \
        if [ -f $$dir/*_test.py ]; then \
            echo "Testing Python in $$dir..."; \
            cd $$dir && $(PYTEST) *_test.py -v; \
            cd - > /dev/null; \
        fi \
    done

# Test specific problem
.PHONY: test-%
test-%:
    @echo "Testing $*..."
    @if [ -f $(PROBLEMS_DIR)/$*/*_test.cc ]; then \
        echo "Running C++ tests for $*..."; \
        $(CXX) $(CXXFLAGS) $(DEBUG_FLAGS) $(INCLUDES) $(TEST_FLAGS) \
            -o $(PROBLEMS_DIR)/$*/test_runner $(PROBLEMS_DIR)/$*/*_test.cc $(PROBLEMS_DIR)/$*/$*.cc; \
        if [ $$? -eq 0 ]; then \
            $(PROBLEMS_DIR)/$*/test_runner; \
            rm -f $(PROBLEMS_DIR)/$*/test_runner; \
        fi \
    fi
    @if [ -f $(PROBLEMS_DIR)/$*/*_test.py ]; then \
        echo "Running Python tests for $*..."; \
        cd $(PROBLEMS_DIR)/$* && $(PYTEST) *_test.py -v; \
    fi

# =============================================================================
# Compilation Rules
# =============================================================================

# Debug build for specific problem
.PHONY: debug-%
debug-%:
    @echo "Building $* with debug info..."
    @if [ -f $(PROBLEMS_DIR)/$*/$*.cc ]; then \
        $(CXX) $(CXXFLAGS) $(DEBUG_FLAGS) $(INCLUDES) -o $(PROBLEMS_DIR)/$*/$*_debug $(PROBLEMS_DIR)/$*/$*.cc; \
    fi

# Run specific problem
.PHONY: run-%
run-%: %
    @echo "Running $*..."
    @if [ -f $(PROBLEMS_DIR)/$*/$* ]; then \
        $(PROBLEMS_DIR)/$*/$*; \
    else \
        echo "Executable for $* not found. Try running 'make $*' first."; \
    fi

# =============================================================================
# Code Quality Rules
# =============================================================================

.PHONY: format
format: format-cpp format-python

.PHONY: format-cpp
format-cpp:
    @echo "Formatting C++ files..."
    @if command -v clang-format >/dev/null 2>&1; then \
        find $(PROBLEMS_DIR) $(COMMON_DIR) -name "*.cc" -o -name "*.h" | xargs clang-format -i; \
        echo "C++ files formatted."; \
    else \
        echo "clang-format not found. Please install it to format C++ files."; \
    fi

.PHONY: format-python
format-python:
    @echo "Formatting Python files..."
    @if command -v ruff >/dev/null 2>&1; then \
        ruff format $(PROBLEMS_DIR); \
        echo "Python files formatted with ruff."; \
    elif command -v black >/dev/null 2>&1; then \
        find $(PROBLEMS_DIR) -name "*.py" | xargs black; \
        echo "Python files formatted with black."; \
    else \
        echo "Neither ruff nor black found. Please install one to format Python files."; \
    fi

.PHONY: lint
lint: lint-cpp lint-python

.PHONY: lint-cpp
lint-cpp:
    @echo "Linting C++ files..."
    @if command -v clang-tidy >/dev/null 2>&1; then \
        find $(PROBLEMS_DIR) -name "*.cc" -o -name "*.h" | xargs clang-tidy; \
    else \
        echo "clang-tidy not found. Please install it to lint C++ files."; \
    fi

.PHONY: lint-python
lint-python:
    @echo "Linting Python files..."
    @if command -v ruff >/dev/null 2>&1; then \
        ruff check $(PROBLEMS_DIR); \
    elif command -v flake8 >/dev/null 2>&1; then \
        find $(PROBLEMS_DIR) -name "*.py" | xargs flake8; \
    else \
        echo "Neither ruff nor flake8 found. Please install one to lint Python files."; \
    fi

# =============================================================================
# Utility Rules
# =============================================================================

.PHONY: clean
clean:
    @echo "Cleaning build artifacts..."
    @find $(PROBLEMS_DIR) -type f -executable -not -name "*.py" -not -name "*.cc" -not -name "*.h" -delete 2>/dev/null || true
    @find $(PROBLEMS_DIR) -name "test_runner" -delete 2>/dev/null || true
    @find $(PROBLEMS_DIR) -name "*_debug" -delete 2>/dev/null || true
    @find $(PROBLEMS_DIR) -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
    @find $(PROBLEMS_DIR) -name "*.pyc" -delete 2>/dev/null || true
    @find $(PROBLEMS_DIR) -name ".pytest_cache" -type d -exec rm -rf {} + 2>/dev/null || true
    @echo "Clean complete."

# Setup new problem structure
.PHONY: new-%
new-%:
    @echo "Creating new problem: $*"
    @mkdir -p $(PROBLEMS_DIR)/$*
    @echo '#pragma once' > $(PROBLEMS_DIR)/$*/$*.h
    @echo '' >> $(PROBLEMS_DIR)/$*/$*.h
    @echo '// TODO: Add function declarations here' >> $(PROBLEMS_DIR)/$*/$*.h
    @echo '#include "$*.h"' > $(PROBLEMS_DIR)/$*/$*.cc
    @echo '' >> $(PROBLEMS_DIR)/$*/$*.cc
    @echo '// TODO: Implement solution here' >> $(PROBLEMS_DIR)/$*/$*.cc
    @echo '#include "$*.h"' > $(PROBLEMS_DIR)/$*/$*_test.cc
    @echo '#include <gtest/gtest.h>' >> $(PROBLEMS_DIR)/$*/$*_test.cc
    @echo '' >> $(PROBLEMS_DIR)/$*/$*_test.cc
    @echo '// TODO: Add test cases here' >> $(PROBLEMS_DIR)/$*/$*_test.cc
    @echo '"""Test cases for $*."""' > $(PROBLEMS_DIR)/$*/$*_test.py
    @echo '' >> $(PROBLEMS_DIR)/$*/$*_test.py
    @echo 'import pytest' >> $(PROBLEMS_DIR)/$*/$*_test.py
    @echo 'from $* import *  # TODO: Import specific functions' >> $(PROBLEMS_DIR)/$*/$*_test.py
    @echo '' >> $(PROBLEMS_DIR)/$*/$*_test.py
    @echo '# TODO: Add test cases here' >> $(PROBLEMS_DIR)/$*/$*_test.py
    @echo '"""Solution for $*."""' > $(PROBLEMS_DIR)/$*/$*.py
    @echo '' >> $(PROBLEMS_DIR)/$*/$*.py
    @echo '# TODO: Implement solution here' >> $(PROBLEMS_DIR)/$*/$*.py
    @echo "Problem structure created for $*"

# Install Python dependencies
.PHONY: install-deps
install-deps:
    @echo "Installing Python dependencies..."
    @if [ -f requirements.txt ]; then \
        $(PYTHON) -m pip install -r requirements.txt; \
    else \
        $(PYTHON) -m pip install pytest ruff; \
    fi

# Show project statistics
.PHONY: stats
stats:
    @echo "=== Project Statistics ==="
    @echo "Problems found: $(words $(PROBLEM_NAMES))"
    @echo "C++ sources: $(words $(CPP_SOURCES))"
    @echo "C++ tests: $(words $(CPP_TESTS))"
    @echo "Python sources: $(words $(PYTHON_SOURCES))"
    @echo "Python tests: $(words $(PYTHON_TESTS))"
    @echo ""
    @echo "Available problems:"
    @for prob in $(PROBLEM_NAMES); do echo "  - $$prob"; done

.PHONY: help
help:
    @echo "Available targets:"
    @echo "  build          - Build all C++ problems"
    @echo "  test           - Run all tests (C++ and Python)"
    @echo "  test-cpp       - Run C++ tests only"
    @echo "  test-python    - Run Python tests only"
    @echo "  test-PROBLEM   - Run tests for specific problem"
    @echo "  run-PROBLEM    - Run specific problem executable"
    @echo "  debug-PROBLEM  - Build problem with debug info"
    @echo "  format         - Format all code"
    @echo "  format-cpp     - Format C++ code only"
    @echo "  format-python  - Format Python code only"
    @echo "  lint           - Lint all code"
    @echo "  lint-cpp       - Lint C++ code only"
    @echo "  lint-python    - Lint Python code only"
    @echo "  clean          - Clean build artifacts"
    @echo "  new-PROBLEM    - Create new problem structure"
    @echo "  install-deps   - Install Python dependencies"
    @echo "  stats          - Show project statistics"
    @echo "  help           - Show this help message"
    @echo ""
    @echo "Available problems: $(PROBLEM_NAMES)"